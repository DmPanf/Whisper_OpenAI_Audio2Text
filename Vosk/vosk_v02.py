# python vosk_v02.py
# https://github.com/alphacep/vosk-api/tree/master/python

import os
import pyaudio
import json
import time
import keyboard
import threading
from vosk import Model, KaldiRecognizer

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
# MODEL_PATH = "./model/vosk-model-ru-0.42"   # –¢—è–∂–µ–ª–∞—è –±–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å
MODEL_PATH = "./model/vosk-model-small-ru-0.22" # –ú–∞–ª–µ–Ω—å–∫–∞—è –ª–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
if not os.path.exists(MODEL_PATH):
    print(f"üö´ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {MODEL_PATH}")
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
print("...–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
model = Model(MODEL_PATH)
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
p = pyaudio.PyAudio()
stream = p.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
stream.start_stream()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
rec = KaldiRecognizer(model, 16000)

def check_for_esc(stop_event):
    while not stop_event.is_set():
        if keyboard.is_pressed('esc'):
            print("‚èπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ ESC")
            stop_event.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
def print_with_timestamp(text, start_time):
    elapsed_time = time.time() - start_time
    print(f"[{elapsed_time:.2f}s] {text}")

def main():
    print("üéô  –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏...")

    stop_event = threading.Event()
    start_time = time.time()

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ ESC
    esc_thread = threading.Thread(target=check_for_esc, args=(stop_event,))
    esc_thread.start()

    buffer_duration = 8  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    buffer_start_time = time.time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞
    collected_text = []  # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞ 8 —Å–µ–∫—É–Ω–¥

    try:
        while not stop_event.is_set():
            # –ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            data = stream.read(4000, exception_on_overflow=False)

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            if rec.AcceptWaveform(data):
                # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                result = rec.Result()
                text = json.loads(result).get("text", "")
                if text:
                    collected_text.append(text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–ª–æ–∫–∞
            if time.time() - buffer_start_time >= buffer_duration:
                if collected_text:
                    # –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞ –±–ª–æ–∫ 8 —Å–µ–∫—É–Ω–¥
                    full_text = " ".join(collected_text)
                    print_with_timestamp(f"üî∞ {full_text}", buffer_start_time)
                    collected_text = []  # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                buffer_start_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞

    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏.")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        stream.stop_stream()
        stream.close()
        p.terminate()
        stop_event.set()
        esc_thread.join()

if __name__ == "__main__":
    main()
