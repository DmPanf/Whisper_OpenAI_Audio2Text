# python vosk_v00.py
# https://github.com/alphacep/vosk-api/tree/master/training

import os
import pyaudio
import json
import threading
import keyboard
from vosk import Model, KaldiRecognizer
from queue import Queue

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
MODEL_PATH = "./model/vosk-model-small-ru-0.22"  # –º–µ–Ω—å—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
stop_event = threading.Event()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
def load_and_recognize():
    global stop_event

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if not os.path.exists(MODEL_PATH):
        print(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {MODEL_PATH}")
        stop_event.set()
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = Model(MODEL_PATH)
    print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
    stream.start_stream()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    rec = KaldiRecognizer(model, 16000)

    print("üéô –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏. –ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

    try:
        while not stop_event.is_set():
            # –ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            data = stream.read(4000, exception_on_overflow=False)

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            if rec.AcceptWaveform(data):
                result = rec.Result()
                text = json.loads(result).get("text", "")
                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            else:
                partial_result = rec.PartialResult()
                partial_text = json.loads(partial_result).get("partial", "")
                if partial_text:
                    print(f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {partial_text}")

    except KeyboardInterrupt:
        pass

    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
        stream.stop_stream()
        stream.close()
        p.terminate()
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è ESC
def check_for_esc():
    global stop_event
    while not stop_event.is_set():
        if keyboard.is_pressed('esc'):
            print("‚èπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ ESC")
            stop_event.set()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    recognition_thread = threading.Thread(target=load_and_recognize)
    esc_thread = threading.Thread(target=check_for_esc)

    recognition_thread.start()
    esc_thread.start()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤
    recognition_thread.join()
    esc_thread.join()

    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()
