# python vosk_v01.py
# https://github.com/alphacep/vosk-api/tree/master/python

import os
import wave
import json
import time
from vosk import Model, KaldiRecognizer

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
# MODEL_PATH = "./model/vosk-model-ru-0.42"   # –¢—è–∂–µ–ª–∞—è –±–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å
MODEL_PATH = "./model/vosk-model-small-ru-0.22" # –ú–∞–ª–µ–Ω—å–∫–∞—è –ª–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
if not os.path.exists(MODEL_PATH):
    print(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {MODEL_PATH}")
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
model = Model(MODEL_PATH)
print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
def print_with_timestamp(text, start_time):
    elapsed_time = time.time() - start_time
    print(f"[{elapsed_time:.2f}s] {text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
def process_audio_file(file_path, model, buffer_duration=8):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    wf = wave.open(file_path, "rb")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
    if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() != 16000:
        print("–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–Ω–æ, 16-–±–∏—Ç–Ω—ã–π –∏ —Å —á–∞—Å—Ç–æ—Ç–æ–π 16000 –ì—Ü.")
        exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    rec = KaldiRecognizer(model, wf.getframerate())

    buffer_start_time = time.time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    collected_text = []  # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞ 8 —Å–µ–∫—É–Ω–¥

    print(f"üéô –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å—Ç—è–º
    while True:
        data = wf.readframes(4000)
        if len(data) == 0:
            break

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        if rec.AcceptWaveform(data):
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            result = rec.Result()
            text = json.loads(result).get("text", "")
            if text:
                collected_text.append(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–ª–æ–∫–∞
        if time.time() - buffer_start_time >= buffer_duration:
            if collected_text:
                # –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞ –±–ª–æ–∫ 8 —Å–µ–∫—É–Ω–¥
                full_text = " ".join(collected_text)
                print_with_timestamp(f"–ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞: {full_text}", buffer_start_time)
                collected_text = []  # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            buffer_start_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞

    # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
    if collected_text:
        full_text = " ".join(collected_text)
        print_with_timestamp(f"–ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞: {full_text}", buffer_start_time)

    wf.close()
    print(f"üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {file_path}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
def main():
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    audio_files = ["./audio/audio_01.wav", "./audio/audio_02.wav"]  # –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤

    for file_path in audio_files:
        process_audio_file(file_path, model)

if __name__ == "__main__":
    main()
